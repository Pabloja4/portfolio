{
  
    
        "post0": {
            "title": "Title",
            "content": "import pandas as pd import numpy as np import seaborn as sns import matplotlib.pyplot as plt import datetime import prophet . sales_train_df = pd.read_csv(r&quot;C: Users pablo Documents Data_Science ventas train.csv&quot;, low_memory=False) . sales_train_df.head() . Store DayOfWeek Date Sales Customers Open Promo StateHoliday SchoolHoliday . 0 1 | 5 | 2015-07-31 | 5263 | 555 | 1 | 1 | 0 | 1 | . 1 2 | 5 | 2015-07-31 | 6064 | 625 | 1 | 1 | 0 | 1 | . 2 3 | 5 | 2015-07-31 | 8314 | 821 | 1 | 1 | 0 | 1 | . 3 4 | 5 | 2015-07-31 | 13995 | 1498 | 1 | 1 | 0 | 1 | . 4 5 | 5 | 2015-07-31 | 4822 | 559 | 1 | 1 | 0 | 1 | . sales_train_df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 1017209 entries, 0 to 1017208 Data columns (total 9 columns): # Column Non-Null Count Dtype -- -- 0 Store 1017209 non-null int64 1 DayOfWeek 1017209 non-null int64 2 Date 1017209 non-null object 3 Sales 1017209 non-null int64 4 Customers 1017209 non-null int64 5 Open 1017209 non-null int64 6 Promo 1017209 non-null int64 7 StateHoliday 1017209 non-null object 8 SchoolHoliday 1017209 non-null int64 dtypes: int64(7), object(2) memory usage: 69.8+ MB . sales_train_df.describe() . Store DayOfWeek Sales Customers Open Promo SchoolHoliday . count 1.017209e+06 | 1.017209e+06 | 1.017209e+06 | 1.017209e+06 | 1.017209e+06 | 1.017209e+06 | 1.017209e+06 | . mean 5.584297e+02 | 3.998341e+00 | 5.773819e+03 | 6.331459e+02 | 8.301067e-01 | 3.815145e-01 | 1.786467e-01 | . std 3.219087e+02 | 1.997391e+00 | 3.849926e+03 | 4.644117e+02 | 3.755392e-01 | 4.857586e-01 | 3.830564e-01 | . min 1.000000e+00 | 1.000000e+00 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 | 0.000000e+00 | . 25% 2.800000e+02 | 2.000000e+00 | 3.727000e+03 | 4.050000e+02 | 1.000000e+00 | 0.000000e+00 | 0.000000e+00 | . 50% 5.580000e+02 | 4.000000e+00 | 5.744000e+03 | 6.090000e+02 | 1.000000e+00 | 0.000000e+00 | 0.000000e+00 | . 75% 8.380000e+02 | 6.000000e+00 | 7.856000e+03 | 8.370000e+02 | 1.000000e+00 | 1.000000e+00 | 0.000000e+00 | . max 1.115000e+03 | 7.000000e+00 | 4.155100e+04 | 7.388000e+03 | 1.000000e+00 | 1.000000e+00 | 1.000000e+00 | . store_info_df = pd.read_csv(r&quot;C: Users pablo Documents Data_Science ventas store.csv&quot;, low_memory=False) . store_info_df.head() . Store StoreType Assortment CompetitionDistance CompetitionOpenSinceMonth CompetitionOpenSinceYear Promo2 Promo2SinceWeek Promo2SinceYear PromoInterval . 0 1 | c | a | 1270.0 | 9.0 | 2008.0 | 0 | NaN | NaN | NaN | . 1 2 | a | a | 570.0 | 11.0 | 2007.0 | 1 | 13.0 | 2010.0 | Jan,Apr,Jul,Oct | . 2 3 | a | a | 14130.0 | 12.0 | 2006.0 | 1 | 14.0 | 2011.0 | Jan,Apr,Jul,Oct | . 3 4 | c | c | 620.0 | 9.0 | 2009.0 | 0 | NaN | NaN | NaN | . 4 5 | a | a | 29910.0 | 4.0 | 2015.0 | 0 | NaN | NaN | NaN | . store_info_df.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 1115 entries, 0 to 1114 Data columns (total 10 columns): # Column Non-Null Count Dtype -- -- 0 Store 1115 non-null int64 1 StoreType 1115 non-null object 2 Assortment 1115 non-null object 3 CompetitionDistance 1112 non-null float64 4 CompetitionOpenSinceMonth 761 non-null float64 5 CompetitionOpenSinceYear 761 non-null float64 6 Promo2 1115 non-null int64 7 Promo2SinceWeek 571 non-null float64 8 Promo2SinceYear 571 non-null float64 9 PromoInterval 571 non-null object dtypes: float64(5), int64(2), object(3) memory usage: 87.2+ KB . store_info_df.describe() . Store CompetitionDistance CompetitionOpenSinceMonth CompetitionOpenSinceYear Promo2 Promo2SinceWeek Promo2SinceYear . count 1115.00000 | 1112.000000 | 761.000000 | 761.000000 | 1115.000000 | 571.000000 | 571.000000 | . mean 558.00000 | 5404.901079 | 7.224704 | 2008.668857 | 0.512108 | 23.595447 | 2011.763573 | . std 322.01708 | 7663.174720 | 3.212348 | 6.195983 | 0.500078 | 14.141984 | 1.674935 | . min 1.00000 | 20.000000 | 1.000000 | 1900.000000 | 0.000000 | 1.000000 | 2009.000000 | . 25% 279.50000 | 717.500000 | 4.000000 | 2006.000000 | 0.000000 | 13.000000 | 2011.000000 | . 50% 558.00000 | 2325.000000 | 8.000000 | 2010.000000 | 1.000000 | 22.000000 | 2012.000000 | . 75% 836.50000 | 6882.500000 | 10.000000 | 2013.000000 | 1.000000 | 37.000000 | 2013.000000 | . max 1115.00000 | 75860.000000 | 12.000000 | 2015.000000 | 1.000000 | 50.000000 | 2015.000000 | . EDA . sales_train_df.isna().sum() . Store 0 DayOfWeek 0 Date 0 Sales 0 Customers 0 Open 0 Promo 0 StateHoliday 0 SchoolHoliday 0 dtype: int64 . store_info_df.isna().sum() . Store 0 StoreType 0 Assortment 0 CompetitionDistance 3 CompetitionOpenSinceMonth 354 CompetitionOpenSinceYear 354 Promo2 0 Promo2SinceWeek 544 Promo2SinceYear 544 PromoInterval 544 dtype: int64 . sales_train_df.hist(bins = 30, figsize=(20,20), color= &quot;r&quot;) . array([[&lt;AxesSubplot:title={&#39;center&#39;:&#39;Store&#39;}&gt;, &lt;AxesSubplot:title={&#39;center&#39;:&#39;DayOfWeek&#39;}&gt;, &lt;AxesSubplot:title={&#39;center&#39;:&#39;Sales&#39;}&gt;], [&lt;AxesSubplot:title={&#39;center&#39;:&#39;Customers&#39;}&gt;, &lt;AxesSubplot:title={&#39;center&#39;:&#39;Open&#39;}&gt;, &lt;AxesSubplot:title={&#39;center&#39;:&#39;Promo&#39;}&gt;], [&lt;AxesSubplot:title={&#39;center&#39;:&#39;SchoolHoliday&#39;}&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;]], dtype=object) . sales_open= sales_train_df[sales_train_df[&quot;Open&quot;]== 1] sales_closed = sales_train_df[sales_train_df[&quot;Open&quot;]== 0] . print(&quot;Porcentaje de tiendas cerradas = {}%&quot;.format(100.0*len(sales_closed)/len(sales_train_df))) . Porcentaje de tiendas cerradas = 16.98933060954042% . sales_train_df = sales_train_df[sales_train_df[&quot;Open&quot;]==1] . sales_train_df.drop(columns=&quot;Open&quot;, axis=1, inplace=True) . sales_train_df.describe() . Store DayOfWeek Sales Customers Promo SchoolHoliday . count 844392.000000 | 844392.000000 | 844392.000000 | 844392.000000 | 844392.000000 | 844392.000000 | . mean 558.422920 | 3.520361 | 6955.514291 | 762.728395 | 0.446352 | 0.193580 | . std 321.731914 | 1.723689 | 3104.214680 | 401.227674 | 0.497114 | 0.395103 | . min 1.000000 | 1.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | . 25% 280.000000 | 2.000000 | 4859.000000 | 519.000000 | 0.000000 | 0.000000 | . 50% 558.000000 | 3.000000 | 6369.000000 | 676.000000 | 0.000000 | 0.000000 | . 75% 837.000000 | 5.000000 | 8360.000000 | 893.000000 | 1.000000 | 0.000000 | . max 1115.000000 | 7.000000 | 41551.000000 | 7388.000000 | 1.000000 | 1.000000 | . store_info_df.isna().sum() . Store 0 StoreType 0 Assortment 0 CompetitionDistance 3 CompetitionOpenSinceMonth 354 CompetitionOpenSinceYear 354 Promo2 0 Promo2SinceWeek 544 Promo2SinceYear 544 PromoInterval 544 dtype: int64 . store_info_df.head() . Store StoreType Assortment CompetitionDistance CompetitionOpenSinceMonth CompetitionOpenSinceYear Promo2 Promo2SinceWeek Promo2SinceYear PromoInterval . 0 1 | c | a | 1270.0 | 9.0 | 2008.0 | 0 | NaN | NaN | NaN | . 1 2 | a | a | 570.0 | 11.0 | 2007.0 | 1 | 13.0 | 2010.0 | Jan,Apr,Jul,Oct | . 2 3 | a | a | 14130.0 | 12.0 | 2006.0 | 1 | 14.0 | 2011.0 | Jan,Apr,Jul,Oct | . 3 4 | c | c | 620.0 | 9.0 | 2009.0 | 0 | NaN | NaN | NaN | . 4 5 | a | a | 29910.0 | 4.0 | 2015.0 | 0 | NaN | NaN | NaN | . replacing_cols = [&quot;Promo2SinceWeek&quot;, &quot;Promo2SinceYear&quot;, &quot;PromoInterval&quot;, &quot;CompetitionOpenSinceMonth&quot;, &quot;CompetitionOpenSinceYear&quot;] for col in replacing_cols: store_info_df[col].fillna(0, inplace=True) . store_info_df[&quot;CompetitionDistance&quot;].fillna(store_info_df[&quot;CompetitionDistance&quot;].mean(), inplace=True) . store_info_df.isnull().sum() . Store 0 StoreType 0 Assortment 0 CompetitionDistance 0 CompetitionOpenSinceMonth 0 CompetitionOpenSinceYear 0 Promo2 0 Promo2SinceWeek 0 Promo2SinceYear 0 PromoInterval 0 dtype: int64 . store_info_df.hist(bins= 30, figsize=(20,20), color = &quot;g&quot;) . array([[&lt;AxesSubplot:title={&#39;center&#39;:&#39;Store&#39;}&gt;, &lt;AxesSubplot:title={&#39;center&#39;:&#39;CompetitionDistance&#39;}&gt;, &lt;AxesSubplot:title={&#39;center&#39;:&#39;CompetitionOpenSinceMonth&#39;}&gt;], [&lt;AxesSubplot:title={&#39;center&#39;:&#39;CompetitionOpenSinceYear&#39;}&gt;, &lt;AxesSubplot:title={&#39;center&#39;:&#39;Promo2&#39;}&gt;, &lt;AxesSubplot:title={&#39;center&#39;:&#39;Promo2SinceWeek&#39;}&gt;], [&lt;AxesSubplot:title={&#39;center&#39;:&#39;Promo2SinceYear&#39;}&gt;, &lt;AxesSubplot:&gt;, &lt;AxesSubplot:&gt;]], dtype=object) . sales_store_df = pd.merge(sales_train_df, store_info_df, how = &quot;inner&quot;, on= &quot;Store&quot;) . sales_store_df.to_csv(&quot;sales_store.csv&quot;, index=False) . sales_store_df.head() . Store DayOfWeek Date Sales Customers Promo StateHoliday SchoolHoliday StoreType Assortment CompetitionDistance CompetitionOpenSinceMonth CompetitionOpenSinceYear Promo2 Promo2SinceWeek Promo2SinceYear PromoInterval . 0 1 | 5 | 2015-07-31 | 5263 | 555 | 1 | 0 | 1 | c | a | 1270.0 | 9.0 | 2008.0 | 0 | 0.0 | 0.0 | 0 | . 1 1 | 4 | 2015-07-30 | 5020 | 546 | 1 | 0 | 1 | c | a | 1270.0 | 9.0 | 2008.0 | 0 | 0.0 | 0.0 | 0 | . 2 1 | 3 | 2015-07-29 | 4782 | 523 | 1 | 0 | 1 | c | a | 1270.0 | 9.0 | 2008.0 | 0 | 0.0 | 0.0 | 0 | . 3 1 | 2 | 2015-07-28 | 5011 | 560 | 1 | 0 | 1 | c | a | 1270.0 | 9.0 | 2008.0 | 0 | 0.0 | 0.0 | 0 | . 4 1 | 1 | 2015-07-27 | 6102 | 612 | 1 | 0 | 1 | c | a | 1270.0 | 9.0 | 2008.0 | 0 | 0.0 | 0.0 | 0 | . f, ax = plt.subplots(figsize= (20,20)) df_corr = sales_store_df.corr().loc[:, [&#39;Sales&#39;]].sort_values(&#39;Sales&#39;, ascending=False) sns.heatmap(df_corr, annot=True, cmap=&quot;RdYlGn&quot;, vmin=-1, vmax=1) . &lt;AxesSubplot:&gt; . sales_store_df[&quot;Year&quot;] = pd.DatetimeIndex(sales_train_df[&quot;Date&quot;]).year sales_store_df[&quot;Month&quot;] = pd.DatetimeIndex(sales_train_df[&quot;Date&quot;]).month sales_store_df[&quot;Day&quot;] = pd.DatetimeIndex(sales_train_df[&quot;Date&quot;]).day . sales_month = sales_store_df.groupby(&quot;Month&quot;)[&quot;Sales&quot;].mean().plot(figsize = (10, 5), marker=&quot;x&quot;, color=&quot;b&quot;) sales_month.set_title(&quot;Ventas promedio al mes&quot;) plt.figure() sales_month = sales_store_df.groupby(&quot;Month&quot;)[&quot;Customers&quot;].mean().plot(figsize = (10, 5), marker=&quot;o&quot;, color=&quot;g&quot;) sales_month.set_title(&quot;Clientes promedio al mes&quot;) . Text(0.5, 1.0, &#39;Clientes promedio al mes&#39;) . sales_day = sales_store_df.groupby(&quot;Day&quot;)[&quot;Sales&quot;].mean().plot(figsize = (10, 5), marker=&quot;x&quot;, color=&quot;b&quot;) sales_day.set_title(&quot;Ventas promedio al día&quot;) plt.figure() sales_day = sales_store_df.groupby(&quot;Day&quot;)[&quot;Customers&quot;].mean().plot(figsize = (10, 5), marker=&quot;o&quot;, color=&quot;g&quot;) sales_day.set_title(&quot;Clientes promedio al día&quot;) . Text(0.5, 1.0, &#39;Clientes promedio al día&#39;) . sales_day_week = sales_store_df.groupby(&quot;DayOfWeek&quot;)[&quot;Sales&quot;].mean().plot(figsize = (10, 5), marker=&quot;x&quot;, color=&quot;b&quot;) sales_day_week.set_title(&quot;Ventas promedio al día&quot;) plt.figure() sales_day_week = sales_store_df.groupby(&quot;DayOfWeek&quot;)[&quot;Customers&quot;].mean().plot(figsize = (10, 5), marker=&quot;o&quot;, color=&quot;g&quot;) sales_day_week.set_title(&quot;Clientes promedio al día&quot;) . Text(0.5, 1.0, &#39;Clientes promedio al día&#39;) . sales_store_df.head() . Store DayOfWeek Date Sales Customers Promo StateHoliday SchoolHoliday StoreType Assortment CompetitionDistance CompetitionOpenSinceMonth CompetitionOpenSinceYear Promo2 Promo2SinceWeek Promo2SinceYear PromoInterval Year Month Day . 0 1 | 5 | 2015-07-31 | 5263 | 555 | 1 | 0 | 1 | c | a | 1270.0 | 9.0 | 2008.0 | 0 | 0.0 | 0.0 | 0 | 2015 | 7 | 31 | . 1 1 | 4 | 2015-07-30 | 5020 | 546 | 1 | 0 | 1 | c | a | 1270.0 | 9.0 | 2008.0 | 0 | 0.0 | 0.0 | 0 | 2015 | 7 | 31 | . 2 1 | 3 | 2015-07-29 | 4782 | 523 | 1 | 0 | 1 | c | a | 1270.0 | 9.0 | 2008.0 | 0 | 0.0 | 0.0 | 0 | 2015 | 7 | 31 | . 3 1 | 2 | 2015-07-28 | 5011 | 560 | 1 | 0 | 1 | c | a | 1270.0 | 9.0 | 2008.0 | 0 | 0.0 | 0.0 | 0 | 2015 | 7 | 31 | . 4 1 | 1 | 2015-07-27 | 6102 | 612 | 1 | 0 | 1 | c | a | 1270.0 | 9.0 | 2008.0 | 0 | 0.0 | 0.0 | 0 | 2015 | 7 | 31 | . fig, ax = plt.subplots(figsize=(20,10)) sales_stores = sales_store_df.groupby([&quot;Date&quot;, &quot;StoreType&quot;]).mean()[&quot;Sales&quot;].unstack().plot(ax=ax) . def sales_predictions(Store_ID, data_frame, periods): data_frame = data_frame[data_frame[&quot;Store&quot;] == Store_ID] data_frame = data_frame[[&quot;Date&quot;, &quot;Sales&quot;]].rename(columns= {&quot;Date&quot;: &quot;ds&quot;, &quot;Sales&quot;:&quot;y&quot;}) data_frame = data_frame.sort_values(&quot;ds&quot;) m = prophet.Prophet(interval_width = 0.95, daily_seasonality=True) m.fit(data_frame) future = m.make_future_dataframe(periods = periods) forecast = m.predict(future) fig = m.plot(forecast, xlabel = &quot;Fecha&quot;, ylabel = &quot;Ventas&quot;) fig2 = m.plot_components(forecast) . sales_predictions(10, sales_store_df, 60) . def sales_predictions(Store_ID, data_frame, periods, holidays): data_frame = data_frame[data_frame[&quot;Store&quot;] == Store_ID] data_frame = data_frame[[&quot;Date&quot;, &quot;Sales&quot;]].rename(columns= {&quot;Date&quot;: &quot;ds&quot;, &quot;Sales&quot;:&quot;y&quot;}) data_frame = data_frame.sort_values(&quot;ds&quot;) m = prophet.Prophet(interval_width = 0.95, daily_seasonality=True, holidays=holidays) m.fit(data_frame) future = m.make_future_dataframe(periods = periods) forecast = m.predict(future) fig = m.plot(forecast, xlabel = &quot;Fecha&quot;, ylabel = &quot;Ventas&quot;) fig2 = m.plot_components(forecast) . school_holidays = sales_store_df[sales_store_df[&quot;SchoolHoliday&quot;] == 1].loc[:, &quot;Date&quot;].values school_holidays = np.unique(school_holidays) school_holidays = pd.DataFrame({&quot;ds&quot;:pd.to_datetime(school_holidays), &quot;holiday&quot;: &quot;school_holiday&quot;}) school_holidays . ds holiday . 0 2013-01-01 | school_holiday | . 1 2013-01-02 | school_holiday | . 2 2013-01-03 | school_holiday | . 3 2013-01-04 | school_holiday | . 4 2013-01-05 | school_holiday | . ... ... | ... | . 472 2015-07-27 | school_holiday | . 473 2015-07-28 | school_holiday | . 474 2015-07-29 | school_holiday | . 475 2015-07-30 | school_holiday | . 476 2015-07-31 | school_holiday | . 477 rows × 2 columns . state_holidays = sales_store_df[(sales_store_df[&quot;StateHoliday&quot;] == &quot;a&quot;)| (sales_store_df[&quot;StateHoliday&quot;] == &quot;b&quot;)| (sales_store_df[&quot;StateHoliday&quot;] == &quot;c&quot;)].loc[:, &quot;Date&quot;].values state_holidays = np.unique(state_holidays) state_holidays = pd.DataFrame({&quot;ds&quot;:pd.to_datetime(state_holidays), &quot;holiday&quot;: &quot;state_holiday&quot;}) state_holidays . ds holiday . 0 2013-01-01 | state_holiday | . 1 2013-01-06 | state_holiday | . 2 2013-03-29 | state_holiday | . 3 2013-04-01 | state_holiday | . 4 2013-05-01 | state_holiday | . 5 2013-05-09 | state_holiday | . 6 2013-05-20 | state_holiday | . 7 2013-05-30 | state_holiday | . 8 2013-08-15 | state_holiday | . 9 2013-10-03 | state_holiday | . 10 2013-10-31 | state_holiday | . 11 2013-11-01 | state_holiday | . 12 2013-12-25 | state_holiday | . 13 2013-12-26 | state_holiday | . 14 2014-01-01 | state_holiday | . 15 2014-01-06 | state_holiday | . 16 2014-04-18 | state_holiday | . 17 2014-04-21 | state_holiday | . 18 2014-05-01 | state_holiday | . 19 2014-05-29 | state_holiday | . 20 2014-06-09 | state_holiday | . 21 2014-06-19 | state_holiday | . 22 2014-10-03 | state_holiday | . 23 2014-10-31 | state_holiday | . 24 2014-11-01 | state_holiday | . 25 2014-12-25 | state_holiday | . 26 2014-12-26 | state_holiday | . 27 2015-01-01 | state_holiday | . 28 2015-01-06 | state_holiday | . 29 2015-04-03 | state_holiday | . 30 2015-04-06 | state_holiday | . 31 2015-05-01 | state_holiday | . 32 2015-05-14 | state_holiday | . 33 2015-05-25 | state_holiday | . 34 2015-06-04 | state_holiday | . holidays_df = pd.concat((school_holidays, state_holidays), axis=0) . sales_predictions (6, sales_store_df, 90, holidays_df) .",
            "url": "https://pabloja4.github.io/portfolio/2022/02/15/Forcasting-ventas.html",
            "relUrl": "/2022/02/15/Forcasting-ventas.html",
            "date": " • Feb 15, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://pabloja4.github.io/portfolio/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://pabloja4.github.io/portfolio/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Comunicador Social y Periodista egresado de La Universidad de Manizales con formación en Inteligencia Artificial, Machine Learning (ML) y Ciencia de Datos. Experiencia desarrollando modelos supervisados de clasificación y regresión en ML. Conocimientos e interés en modelos no supervisados de clustering y reportería de datos. . Orientado al logro, con habilidades como la tolerancia al error, atención al detalle, resolución de problemas, trabajo en equipo y análisis de datos. Manejo de herramientas como Power BI, SQL server. Lenguajes como SQL y Python, con librerías tales como Pandas, Numpy, Seaborn, Matplotlib y Sklearn. . https://www.linkedin.com/in/pablojaramillojaramillo/ .",
          "url": "https://pabloja4.github.io/portfolio/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://pabloja4.github.io/portfolio/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}